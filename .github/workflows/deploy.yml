name: Deploy Infrastructure and Applications

permissions:
  contents: read
  id-token: write

on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: string
      image_tag:
        description: 'Container image tag to deploy'
        required: true
        type: string
      release_tag:
        description: 'Release tag for deployment'
        required: true
        type: string
      run_id:
        description: 'GitHub run ID for image identification'
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        description: 'Azure Client ID for authentication'
        required: true
      AZURE_TENANT_ID:
        description: 'Azure Tenant ID for authentication'
        required: true  
      AZURE_SUBSCRIPTION_ID:
        description: 'Azure Subscription ID for authentication'
        required: true
      FRONTEND_CLIENT_ID:
        description: 'Frontend Entra ID client ID'
        required: true
      BACKEND_CLIENT_ID:
        description: 'Backend Entra ID client ID'
        required: true
      BACKEND_CLIENT_SECRET:
        description: 'Backend Entra ID client secret'
        required: true
      AZURE_OPENAI_KEY:
        description: 'Azure OpenAI API key'
        required: true
      JWT_SECRET_KEY:
        description: 'JWT secret key for backend authentication'
        required: true

env:
  REGISTRY: ghcr.io
  AZURE_LOCATION: eastus2

jobs:
  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment: 
      name: ${{ inputs.environment }}
      url: ${{ inputs.environment == 'dev' && 'https://dev-azure-devops-agent.azurecontainerapps.io' || 'https://azure-devops-agent.azurecontainerapps.io' }}
    
    outputs:
      container-apps-environment: ${{ steps.deploy-infra.outputs.containerAppsEnvironmentName }}
      acr-login-server: ${{ steps.deploy-infra.outputs.containerRegistryLoginServer }}
      backend-app-name: ${{ steps.deploy-apps.outputs.backend-app-name }}
      frontend-app-name: ${{ steps.deploy-apps.outputs.frontend-app-name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set lowercase repository name
      run: |
        echo "REPO_LOWER=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
        
    - name: Set environment variables
      run: |
        echo "RELEASE_TAG=${{ inputs.release_tag }}" >> $GITHUB_ENV
        echo "RUN_ID=${{ inputs.run_id }}" >> $GITHUB_ENV
        echo "AZURE_RESOURCE_GROUP=rg-azure-devops-agent-${{ inputs.environment }}" >> $GITHUB_ENV
        echo "BACKEND_APP_NAME=azdo-ai-agent-${{ inputs.environment }}-backend" >> $GITHUB_ENV
        echo "FRONTEND_APP_NAME=azdo-ai-agent-${{ inputs.environment }}-frontend" >> $GITHUB_ENV
        
    - name: Set Azure DevOps organization
      run: |
        if [ "${{ inputs.environment }}" == "prod" ]; then
          echo "AZURE_DEVOPS_ORG=https://dev.azure.com/your-prod-org" >> $GITHUB_ENV
        else
          echo "AZURE_DEVOPS_ORG=https://dev.azure.com/your-dev-org" >> $GITHUB_ENV
        fi
        
    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
    - name: Deploy Infrastructure
      id: deploy-infra
      run: |
        echo "Deploying infrastructure to ${{ inputs.environment }} environment..."
        
        # Set secure parameter values from repository secrets passed from CI workflow
        BACKEND_CLIENT_SECRET="${{ secrets.BACKEND_CLIENT_SECRET }}"
        AZURE_OPENAI_KEY="${{ secrets.AZURE_OPENAI_KEY }}"
        FRONTEND_CLIENT_ID="${{ secrets.FRONTEND_CLIENT_ID }}"
        BACKEND_CLIENT_ID="${{ secrets.BACKEND_CLIENT_ID }}"
        AZURE_TENANT_ID="${{ secrets.AZURE_TENANT_ID }}"
        JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}"
        
        # Validate that required secrets are provided
        if [[ -z "$FRONTEND_CLIENT_ID" ]]; then
          echo "❌ Error: Frontend client ID is not configured"
          echo "💡 Configure either:"
          echo "   - Repository secret: FRONTEND_CLIENT_ID_${{ inputs.environment == 'dev' && 'DEV' || 'PROD' }} in repository secrets"
          echo "📚 This should contain the client ID of your frontend Entra ID application"
          exit 1
        fi
        if [[ -z "$BACKEND_CLIENT_ID" ]]; then
          echo "❌ Error: Backend client ID is not configured"
          echo "💡 Configure either:"
          echo "   - Repository secret: BACKEND_CLIENT_ID_${{ inputs.environment == 'dev' && 'DEV' || 'PROD' }} in repository secrets"
          echo "📚 This should contain the client ID of your backend Entra ID application"
          exit 1
        fi
        if [[ -z "$AZURE_TENANT_ID" ]]; then
          echo "❌ Error: Azure tenant ID is not configured"
          echo "💡 Configure either:"
          echo "   - Repository secret: AZURE_TENANT_ID_${{ inputs.environment == 'dev' && 'DEV' || 'PROD' }} in repository secrets"
          echo "📚 This should contain your Azure Entra ID tenant ID"
          exit 1
        fi
        if [[ -z "$BACKEND_CLIENT_SECRET" ]]; then
          echo "❌ Error: Backend client secret is not configured"
          echo "💡 Configure either:"
          echo "   - Repository secret: BACKEND_CLIENT_SECRET_${{ inputs.environment == 'dev' && 'DEV' || 'PROD' }} in repository secrets"
          echo "📚 This should contain the client secret of your backend Entra ID application"
          exit 1
        fi
        if [[ -z "$AZURE_OPENAI_KEY" ]]; then
          echo "❌ Error: Azure OpenAI key is not configured"
          echo "💡 Configure either:"
          echo "   - Repository secret: AZURE_OPENAI_KEY_${{ inputs.environment == 'dev' && 'DEV' || 'PROD' }} in repository secrets"
          echo "📚 This should contain your Azure OpenAI service access key"
          exit 1
        fi
        if [[ -z "$JWT_SECRET_KEY" ]]; then
          echo "❌ Error: JWT secret key is not configured"
          echo "💡 Configure either:"
          echo "   - Repository secret: JWT_SECRET_KEY_${{ inputs.environment == 'dev' && 'DEV' || 'PROD' }} in repository secrets"
          echo "📚 This should contain a secure JWT secret key for backend authentication"
          exit 1
        fi
        
        deployment_output=$(az deployment group create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --template-file infra/main.bicep \
          --parameters infra/parameters/main.${{ inputs.environment }}.bicepparam \
          --parameters backendClientSecret="${BACKEND_CLIENT_SECRET}" \
          --parameters azureOpenAIKey="${AZURE_OPENAI_KEY}" \
          --parameters frontendClientId="${FRONTEND_CLIENT_ID}" \
          --parameters backendClientId="${BACKEND_CLIENT_ID}" \
          --parameters entraIdTenantId="${AZURE_TENANT_ID}" \
          --parameters jwtSecretKey="${JWT_SECRET_KEY}" \
          --name "infra-deploy-$(echo ${{ github.sha }} | cut -c1-8)" \
          --query 'properties.outputs' \
          --output json)
        
        # Extract outputs
        container_apps_env=$(echo $deployment_output | jq -r '.containerAppsEnvironmentName.value')
        acr_login_server=$(echo $deployment_output | jq -r '.containerRegistryLoginServer.value')
        backend_identity_client_id=$(echo $deployment_output | jq -r '.backendManagedIdentityClientId.value')
        backend_identity_resource_id=$(echo $deployment_output | jq -r '.backendManagedIdentityResourceId.value')
        frontend_identity_client_id=$(echo $deployment_output | jq -r '.frontendManagedIdentityClientId.value')
        frontend_identity_resource_id=$(echo $deployment_output | jq -r '.frontendManagedIdentityResourceId.value')
        key_vault_name=$(echo $deployment_output | jq -r '.keyVaultName.value')
        openai_endpoint=$(echo $deployment_output | jq -r '.openAIEndpoint.value')
        
        # Get the container apps environment default domain to construct FQDNs
        environment_default_domain=$(az containerapp env show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${container_apps_env} \
          --query properties.defaultDomain \
          --output tsv)
        
        echo "containerAppsEnvironmentName=${container_apps_env}" >> $GITHUB_OUTPUT
        echo "containerRegistryLoginServer=${acr_login_server}" >> $GITHUB_OUTPUT
        echo "backendManagedIdentityClientId=${backend_identity_client_id}" >> $GITHUB_OUTPUT
        echo "backendManagedIdentityResourceId=${backend_identity_resource_id}" >> $GITHUB_OUTPUT
        echo "frontendManagedIdentityClientId=${frontend_identity_client_id}" >> $GITHUB_OUTPUT
        echo "frontendManagedIdentityResourceId=${frontend_identity_resource_id}" >> $GITHUB_OUTPUT
        echo "keyVaultName=${key_vault_name}" >> $GITHUB_OUTPUT
        echo "openAIEndpoint=${openai_endpoint}" >> $GITHUB_OUTPUT
        echo "environmentDefaultDomain=${environment_default_domain}" >> $GITHUB_OUTPUT
        
        echo "✅ Infrastructure deployed successfully"
        echo "🏗️ Container Apps Environment: ${container_apps_env}"
        echo "🌐 Environment Default Domain: ${environment_default_domain}"
        echo "📦 ACR Login Server: ${acr_login_server}"
        echo "🔑 Backend Identity Client ID: ${backend_identity_client_id}"
        echo "🔑 Backend Identity Resource ID: ${backend_identity_resource_id}"
        echo "🔑 Frontend Identity Client ID: ${frontend_identity_client_id}"
        echo "🔑 Frontend Identity Resource ID: ${frontend_identity_resource_id}"
        echo "🗝️ Key Vault: ${key_vault_name}"
        echo "🤖 OpenAI Endpoint: ${openai_endpoint}"
        
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Login to Azure Container Registry
      run: |
        # Extract registry name from login server FQDN (remove .azurecr.io suffix)
        ACR_NAME=$(echo "${{ steps.deploy-infra.outputs.containerRegistryLoginServer }}" | sed 's/\.azurecr\.io$//')
        az acr login --name "${ACR_NAME}"
        
    - name: Copy images from GHCR to ACR
      run: |
        # Define source and target images
        GHCR_BACKEND="${{ env.REGISTRY }}/${{ env.REPO_LOWER }}/backend:${{ env.RUN_ID }}"
        GHCR_FRONTEND="${{ env.REGISTRY }}/${{ env.REPO_LOWER }}/frontend:${{ env.RUN_ID }}"
        
        ACR_BACKEND="${{ steps.deploy-infra.outputs.containerRegistryLoginServer }}/backend:${{ env.RELEASE_TAG }}"
        ACR_FRONTEND="${{ steps.deploy-infra.outputs.containerRegistryLoginServer }}/frontend:${{ env.RELEASE_TAG }}"
        
        echo "Copying backend image..."
        echo "Source: ${GHCR_BACKEND}"
        echo "Target: ${ACR_BACKEND}"
        docker pull "${GHCR_BACKEND}"
        docker tag "${GHCR_BACKEND}" "${ACR_BACKEND}"
        docker push "${ACR_BACKEND}"
        
        echo "Copying frontend image..."
        echo "Source: ${GHCR_FRONTEND}"
        echo "Target: ${ACR_FRONTEND}"
        docker pull "${GHCR_FRONTEND}"
        docker tag "${GHCR_FRONTEND}" "${ACR_FRONTEND}"
        docker push "${ACR_FRONTEND}"
        
        echo "✅ Images copied to ACR successfully"
        
    - name: Deploy Backend Container App
      run: |
        echo "🚀 Deploying backend container app using custom script..."
        
        ./scripts/deploy-containerapp.sh \
          --environment "${{ steps.deploy-infra.outputs.containerAppsEnvironmentName }}" \
          --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" \
          --app-name "${{ env.BACKEND_APP_NAME }}" \
          --image "${{ steps.deploy-infra.outputs.containerRegistryLoginServer }}/backend:${{ env.RELEASE_TAG }}" \
          --target-port 8000 \
          --registry-server "${{ steps.deploy-infra.outputs.containerRegistryLoginServer }}" \
          --registry-identity system \
          --managed-identity "${{ steps.deploy-infra.outputs.backendManagedIdentityResourceId }}" \
          --key-vault-name "${{ steps.deploy-infra.outputs.keyVaultName }}" \
          --cpu 1.0 \
          --memory 2Gi \
          --min-replicas 1 \
          --max-replicas 5 \
          --revisions-mode multiple \
          --env-var "AZURE_OPENAI_DEPLOYMENT_NAME=gpt-4" \
          --env-var "AZURE_DEVOPS_ORGANIZATION=${{ env.AZURE_DEVOPS_ORG }}" \
          --env-var "ENVIRONMENT=${{ inputs.environment }}" \
          --env-var "AZURE_OPENAI_ENDPOINT=${{ steps.deploy-infra.outputs.openAIEndpoint }}" \
          --secret-ref "AZURE_TENANT_ID=entra-tenant-id" \
          --secret-ref "AZURE_CLIENT_ID=backend-client-id" \
          --secret-ref "AZURE_CLIENT_SECRET=backend-client-secret" \
          --secret-ref "JWT_SECRET_KEY=jwt-secret-key" \
          --secret-ref "APPLICATIONINSIGHTS_CONNECTION_STRING=app-insights-connection-string" \
          --verbose
          
    - name: Configure Backend CORS Settings
      run: |
        echo "🌐 Configuring CORS settings for backend container app..."
        
        # Configure CORS to allow the frontend FQDN
        ./scripts/configure-cors.sh \
          --app-name "${{ env.BACKEND_APP_NAME }}" \
          --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" \
          --allowed-origins "https://${{ env.FRONTEND_APP_NAME }}.${{ steps.deploy-infra.outputs.environmentDefaultDomain }}" \
          --verbose
          
    - name: Deploy Frontend Container App  
      run: |
        echo "🎨 Deploying frontend container app using custom script..."
        
        ./scripts/deploy-containerapp.sh \
          --environment "${{ steps.deploy-infra.outputs.containerAppsEnvironmentName }}" \
          --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" \
          --app-name "${{ env.FRONTEND_APP_NAME }}" \
          --image "${{ steps.deploy-infra.outputs.containerRegistryLoginServer }}/frontend:${{ env.RELEASE_TAG }}" \
          --target-port 3000 \
          --registry-server "${{ steps.deploy-infra.outputs.containerRegistryLoginServer }}" \
          --registry-identity system \
          --managed-identity "${{ steps.deploy-infra.outputs.frontendManagedIdentityResourceId }}" \
          --key-vault-name "${{ steps.deploy-infra.outputs.keyVaultName }}" \
          --cpu 0.5 \
          --memory 1Gi \
          --min-replicas 1 \
          --max-replicas 3 \
          --revisions-mode multiple \
          --env-var "FRONTEND_URL=https://${{ env.FRONTEND_APP_NAME }}.${{ steps.deploy-infra.outputs.environmentDefaultDomain }}" \
          --env-var "BACKEND_URL=https://${{ env.BACKEND_APP_NAME }}.${{ steps.deploy-infra.outputs.environmentDefaultDomain }}" \
          --env-var "NEXT_PUBLIC_BACKEND_URL=https://${{ env.BACKEND_APP_NAME }}.${{ steps.deploy-infra.outputs.environmentDefaultDomain }}" \
          --env-var "NEXT_PUBLIC_ENVIRONMENT=${{ inputs.environment }}" \
          --secret-ref "AZURE_TENANT_ID=entra-tenant-id" \
          --secret-ref "AZURE_CLIENT_ID=frontend-client-id" \
          --secret-ref "BACKEND_CLIENT_ID=backend-client-id" \
          --secret-ref "NEXT_PUBLIC_AZURE_TENANT_ID=entra-tenant-id" \
          --secret-ref "NEXT_PUBLIC_AZURE_CLIENT_ID=frontend-client-id" \
          --secret-ref "NEXT_PUBLIC_APPLICATIONINSIGHTS_CONNECTION_STRING=app-insights-connection-string" \
          --verbose
        
    - name: Set Container App outputs
      id: deploy-apps
      run: |
        echo "backend-app-name=${{ env.BACKEND_APP_NAME }}" >> $GITHUB_OUTPUT
        echo "frontend-app-name=${{ env.FRONTEND_APP_NAME }}" >> $GITHUB_OUTPUT
        
    - name: Smoke Test
      run: |
        echo "Running ${{ inputs.environment }} smoke tests..."
        
        # Wait for deployment to be ready
        if [ "${{ inputs.environment }}" == "prod" ]; then
          sleep 90
        else
          sleep 60
        fi
        
        # Get app URLs
        backend_url=$(az containerapp show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.BACKEND_APP_NAME }} \
          --query properties.configuration.ingress.fqdn \
          --output tsv)
          
        frontend_url=$(az containerapp show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.FRONTEND_APP_NAME }} \
          --query properties.configuration.ingress.fqdn \
          --output tsv)
        
        # Test backend health endpoint
        if curl -f "https://${backend_url}/health" > /dev/null 2>&1; then
          echo "✅ Backend health check passed"
        else
          echo "❌ Backend health check failed"
          exit 1
        fi
        
        # Test frontend accessibility
        if curl -f "https://${frontend_url}" > /dev/null 2>&1; then
          echo "✅ Frontend accessibility check passed"
        else
          echo "❌ Frontend accessibility check failed"
          exit 1
        fi
        
        echo "🎉 ${{ inputs.environment }} deployment completed successfully!"