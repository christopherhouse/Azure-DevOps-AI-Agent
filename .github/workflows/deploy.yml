name: Deploy Infrastructure and Applications

permissions:
  contents: read

on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: string
      image_tag:
        description: 'Container image tag to deploy'
        required: true
        type: string
      release_tag:
        description: 'Release tag for deployment'
        required: true
        type: string
      run_id:
        description: 'GitHub run ID for image identification'
        required: true
        type: string
    secrets:
      AZURE_CREDENTIALS:
        description: 'Azure credentials for authentication'
        required: true

env:
  REGISTRY: ghcr.io
  AZURE_LOCATION: eastus

jobs:
  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment: 
      name: ${{ inputs.environment }}
      url: ${{ inputs.environment == 'dev' && 'https://dev-azure-devops-agent.azurecontainerapps.io' || 'https://azure-devops-agent.azurecontainerapps.io' }}
    
    outputs:
      container-apps-environment: ${{ steps.deploy-infra.outputs.containerAppsEnvironmentName }}
      acr-login-server: ${{ steps.deploy-infra.outputs.containerRegistryLoginServer }}
      backend-app-name: ${{ steps.deploy-apps.outputs.backend-app-name }}
      frontend-app-name: ${{ steps.deploy-apps.outputs.frontend-app-name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set lowercase repository name
      run: |
        echo "REPO_LOWER=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
        
    - name: Set environment variables
      run: |
        echo "RELEASE_TAG=${{ inputs.release_tag }}" >> $GITHUB_ENV
        echo "RUN_ID=${{ inputs.run_id }}" >> $GITHUB_ENV
        echo "AZURE_RESOURCE_GROUP=rg-azure-devops-agent-${{ inputs.environment }}" >> $GITHUB_ENV
        echo "BACKEND_APP_NAME=azdo-ai-agent-${{ inputs.environment }}-backend" >> $GITHUB_ENV
        echo "FRONTEND_APP_NAME=azdo-ai-agent-${{ inputs.environment }}-frontend" >> $GITHUB_ENV
        
    - name: Set Azure DevOps organization
      run: |
        if [ "${{ inputs.environment }}" == "prod" ]; then
          echo "AZURE_DEVOPS_ORG=https://dev.azure.com/your-prod-org" >> $GITHUB_ENV
        else
          echo "AZURE_DEVOPS_ORG=https://dev.azure.com/your-dev-org" >> $GITHUB_ENV
        fi
        
    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
    - name: Deploy Infrastructure
      id: deploy-infra
      run: |
        echo "Deploying infrastructure to ${{ inputs.environment }} environment..."
        
        deployment_output=$(az deployment group create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --template-file infra/main.bicep \
          --parameters infra/parameters/main.${{ inputs.environment }}.bicepparam \
          --query 'properties.outputs' \
          --output json)
        
        # Extract outputs
        container_apps_env=$(echo $deployment_output | jq -r '.containerAppsEnvironmentName.value')
        acr_login_server=$(echo $deployment_output | jq -r '.containerRegistryLoginServer.value')
        
        echo "containerAppsEnvironmentName=${container_apps_env}" >> $GITHUB_OUTPUT
        echo "containerRegistryLoginServer=${acr_login_server}" >> $GITHUB_OUTPUT
        
        echo "✅ Infrastructure deployed successfully"
        echo "🏗️ Container Apps Environment: ${container_apps_env}"
        echo "📦 ACR Login Server: ${acr_login_server}"
        
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Login to Azure Container Registry
      run: |
        az acr login --name ${{ steps.deploy-infra.outputs.containerRegistryLoginServer }}
        
    - name: Copy images from GHCR to ACR
      run: |
        # Define source and target images
        GHCR_BACKEND="${{ env.REGISTRY }}/${{ env.REPO_LOWER }}/backend:${{ env.RUN_ID }}"
        GHCR_FRONTEND="${{ env.REGISTRY }}/${{ env.REPO_LOWER }}/frontend:${{ env.RUN_ID }}"
        
        ACR_BACKEND="${{ steps.deploy-infra.outputs.containerRegistryLoginServer }}/backend:${{ env.RELEASE_TAG }}"
        ACR_FRONTEND="${{ steps.deploy-infra.outputs.containerRegistryLoginServer }}/frontend:${{ env.RELEASE_TAG }}"
        
        echo "Copying backend image..."
        echo "Source: ${GHCR_BACKEND}"
        echo "Target: ${ACR_BACKEND}"
        docker pull "${GHCR_BACKEND}"
        docker tag "${GHCR_BACKEND}" "${ACR_BACKEND}"
        docker push "${ACR_BACKEND}"
        
        echo "Copying frontend image..."
        echo "Source: ${GHCR_FRONTEND}"
        echo "Target: ${ACR_FRONTEND}"
        docker pull "${GHCR_FRONTEND}"
        docker tag "${GHCR_FRONTEND}" "${ACR_FRONTEND}"
        docker push "${ACR_FRONTEND}"
        
        echo "✅ Images copied to ACR successfully"
        
    - name: Deploy Backend Container App
      uses: azure/container-apps-deploy-action@v1
      with:
        acrName: ${{ steps.deploy-infra.outputs.containerRegistryLoginServer }}
        containerAppName: ${{ env.BACKEND_APP_NAME }}
        resourceGroup: ${{ env.AZURE_RESOURCE_GROUP }}
        imageToDeploy: ${{ steps.deploy-infra.outputs.containerRegistryLoginServer }}/backend:${{ env.RELEASE_TAG }}
        targetPort: 8000
        ingress: external
        environmentVariables: |
          AZURE_OPENAI_ENDPOINT=secretref:azure-openai-endpoint
          AZURE_OPENAI_KEY=secretref:azure-openai-key
          AZURE_OPENAI_DEPLOYMENT_NAME=gpt-4
          AZURE_DEVOPS_ORGANIZATION=${{ env.AZURE_DEVOPS_ORG }}
          AZURE_TENANT_ID=secretref:entra-tenant-id
          AZURE_CLIENT_ID=secretref:entra-client-id
          AZURE_CLIENT_SECRET=secretref:entra-client-secret
          APPLICATIONINSIGHTS_CONNECTION_STRING=secretref:app-insights-connection-string
          ENVIRONMENT=${{ inputs.environment }}
          
    - name: Deploy Frontend Container App
      uses: azure/container-apps-deploy-action@v1
      with:
        acrName: ${{ steps.deploy-infra.outputs.containerRegistryLoginServer }}
        containerAppName: ${{ env.FRONTEND_APP_NAME }}
        resourceGroup: ${{ env.AZURE_RESOURCE_GROUP }}
        imageToDeploy: ${{ steps.deploy-infra.outputs.containerRegistryLoginServer }}/frontend:${{ env.RELEASE_TAG }}
        targetPort: 7860
        ingress: external
        environmentVariables: |
          BACKEND_URL=https://${{ env.BACKEND_APP_NAME }}
          AZURE_TENANT_ID=secretref:entra-tenant-id
          AZURE_CLIENT_ID=secretref:entra-client-id
          AZURE_CLIENT_SECRET=secretref:entra-client-secret
          APPLICATIONINSIGHTS_CONNECTION_STRING=secretref:app-insights-connection-string
          ENVIRONMENT=${{ inputs.environment }}
        
    - name: Set Container App outputs
      id: deploy-apps
      run: |
        echo "backend-app-name=${{ env.BACKEND_APP_NAME }}" >> $GITHUB_OUTPUT
        echo "frontend-app-name=${{ env.FRONTEND_APP_NAME }}" >> $GITHUB_OUTPUT
        
    - name: Smoke Test
      run: |
        echo "Running ${{ inputs.environment }} smoke tests..."
        
        # Wait for deployment to be ready
        if [ "${{ inputs.environment }}" == "prod" ]; then
          sleep 90
        else
          sleep 60
        fi
        
        # Get app URLs
        backend_url=$(az containerapp show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.BACKEND_APP_NAME }} \
          --query properties.configuration.ingress.fqdn \
          --output tsv)
          
        frontend_url=$(az containerapp show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.FRONTEND_APP_NAME }} \
          --query properties.configuration.ingress.fqdn \
          --output tsv)
        
        # Test backend health endpoint
        if curl -f "https://${backend_url}/health" > /dev/null 2>&1; then
          echo "✅ Backend health check passed"
        else
          echo "❌ Backend health check failed"
          exit 1
        fi
        
        # Test frontend accessibility
        if curl -f "https://${frontend_url}" > /dev/null 2>&1; then
          echo "✅ Frontend accessibility check passed"
        else
          echo "❌ Frontend accessibility check failed"
          exit 1
        fi
        
        echo "🎉 ${{ inputs.environment }} deployment completed successfully!"