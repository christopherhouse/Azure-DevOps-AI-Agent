name: CI - Build, Test, and Publish

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend

jobs:
  quality-checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'src/frontend/package-lock.json'

    - name: Install dependencies
      run: |
        # Install backend dependencies
        cd src/backend/dotnet
        dotnet restore

        # Install frontend dependencies
        cd ../../frontend
        npm ci

    - name: Run backend quality checks
      working-directory: src/backend/dotnet
      run: |
        echo "Running .NET backend quality checks..."
        
        # Build the project (includes compilation checks)
        dotnet build --configuration Release --no-restore
        
        echo "✅ .NET backend quality checks completed successfully!"
        
    - name: Run frontend quality checks
      working-directory: src/frontend
      run: |
        npm run lint
        npm run type-check
        
    - name: Run .NET security analysis
      working-directory: src/backend/dotnet
      run: |
        echo "Running .NET security analysis..."
        
        # Install security analyzer tool
        dotnet tool install --global security-scan --version 5.6.7
        
        # Run security scan on the solution
        security-scan AzureDevOpsAI.sln --export security-report.json || true
        
        echo "✅ .NET security analysis completed!"
        
    - name: Display security scan results on failure
      if: failure()
      working-directory: src/backend/dotnet
      run: |
        echo "⚠️ .NET security scan completed with findings"
        echo "📋 Security analysis results:"
        if [ -f security-report.json ]; then
          echo "=== SECURITY ANALYSIS REPORT ==="
          cat security-report.json | head -50
          echo "... (see full report in artifacts)"
        else
          echo "No security report generated"
        fi
        echo ""
        echo "🔧 To address security findings:"
        echo "  1. Review the security analysis above"
        echo "  2. Update NuGet packages to latest secure versions"
        echo "  3. Address code vulnerabilities highlighted"
        echo "  4. Consider using Microsoft.CodeAnalysis.NetAnalyzers"
        echo ""
        echo "📚 Documentation: https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/security-rules"
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dotnet-security-results
        path: src/backend/dotnet/security-report.json

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0'
          
    - name: Install dependencies
      working-directory: src/backend/dotnet
      run: |
        dotnet restore
        
    - name: Run backend tests
      working-directory: src/backend/dotnet
      run: |
        echo "Running .NET backend tests..."
        
        # Create test results directory
        mkdir -p TestResults
        
        # Run tests with coverage collection
        dotnet test \
          --configuration Release \
          --no-restore \
          --logger "trx;LogFileName=test-results.trx" \
          --collect:"XPlat Code Coverage" \
          --results-directory TestResults \
          --verbosity normal
        
        echo "✅ Backend tests completed successfully!"
        
    - name: Install ReportGenerator for coverage reports
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        
    - name: Generate coverage report
      working-directory: src/backend/dotnet
      run: |
        # Generate HTML coverage report
        reportgenerator \
          -reports:"TestResults/*/coverage.cobertura.xml" \
          -targetdir:"TestResults/CoverageReport" \
          -reporttypes:"Html;Cobertura"
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: src/backend/dotnet/TestResults/test-results.trx
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-coverage
        path: src/backend/dotnet/TestResults/CoverageReport/
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: src/backend/dotnet/TestResults/CoverageReport/Cobertura.xml
        flags: backend
        name: backend-coverage

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'src/frontend/package-lock.json'
          
    - name: Install dependencies
      working-directory: src/frontend
      run: |
        npm ci
        
    - name: Run frontend tests
      working-directory: src/frontend
      run: |
        npm run test:coverage
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-test-results
        path: src/frontend/coverage/
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-coverage
        path: src/frontend/coverage/
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: src/frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  build-and-push-images:
    name: Build and Push Container Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')) || github.event_name == 'workflow_dispatch'

    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set lowercase repository name
      run: |
        echo "REPO_LOWER=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.REPO_LOWER }}/backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=run-${{ github.run_id }}
          
    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.REPO_LOWER }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=run-${{ github.run_id }}
          
    - name: Prepare build context for backend
      run: |
        # Copy required files to backend build context for Docker metadata validation
        cp LICENSE ./src/backend/dotnet/
        cp README.md ./src/backend/dotnet/
        
    - name: Prepare build context for frontend  
      run: |
        # Copy required files to frontend build context for Docker metadata validation
        cp LICENSE ./src/frontend/
        cp README.md ./src/frontend/
        
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./src/backend/dotnet
        file: ./src/backend/dotnet/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./src/frontend
        file: ./src/frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build-and-push-images
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')) || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      packages: read
      security-events: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set lowercase repository name
      run: |
        echo "REPO_LOWER=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Verify backend image exists
      run: |
        echo "Verifying backend image exists: ${{ env.REGISTRY }}/${{ env.REPO_LOWER }}/backend:run-${{ github.run_id }}"
        if ! docker manifest inspect ${{ env.REGISTRY }}/${{ env.REPO_LOWER }}/backend:run-${{ github.run_id }}; then
          echo "❌ Backend image not found in registry"
          echo "Available tags for backend:"
          docker images | grep "backend" || echo "No backend images found"
          exit 1
        fi
        echo "✅ Backend image verified"
        
    - name: Verify frontend image exists  
      run: |
        echo "Verifying frontend image exists: ${{ env.REGISTRY }}/${{ env.REPO_LOWER }}/frontend:run-${{ github.run_id }}"
        if ! docker manifest inspect ${{ env.REGISTRY }}/${{ env.REPO_LOWER }}/frontend:run-${{ github.run_id }}; then
          echo "❌ Frontend image not found in registry"
          echo "Available tags for frontend:"
          docker images | grep "frontend" || echo "No frontend images found"
          exit 1
        fi
        echo "✅ Frontend image verified"
        
    - name: Run Trivy vulnerability scanner - Backend
      uses: aquasecurity/trivy-action@0.32.0
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.REPO_LOWER }}/backend:run-${{ github.run_id }}
        format: 'sarif'
        output: 'backend-trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: Run Trivy vulnerability scanner - Frontend
      uses: aquasecurity/trivy-action@0.32.0
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.REPO_LOWER }}/frontend:run-${{ github.run_id }}
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: Upload Backend Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('backend-trivy-results.sarif') != ''
      with:
        sarif_file: backend-trivy-results.sarif
        category: 'trivy-backend'
        
    - name: Upload Frontend Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('frontend-trivy-results.sarif') != ''
      with:
        sarif_file: frontend-trivy-results.sarif
        category: 'trivy-frontend'
        
    - name: Upload Trivy scan results as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-security-scan-results
        path: |
          backend-trivy-results.sarif
          frontend-trivy-results.sarif
        retention-days: 30

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-and-push-images, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: write
    
    outputs:
      release-tag: ${{ steps.create-release.outputs.tag_name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set lowercase repository name
      run: |
        echo "REPO_LOWER=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
        
    - name: Get latest tag
      id: get-latest-tag
      run: |
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        echo "latest_tag=${latest_tag}" >> $GITHUB_OUTPUT
        
    - name: Generate release notes
      id: generate-notes
      run: |
        # Simple release notes generation
        echo "## Changes in this release" > release-notes.md
        echo "" >> release-notes.md
        
        # Generate commit list based on whether tags exist
        if [[ -n "${{ steps.get-latest-tag.outputs.latest_tag }}" ]]; then
          # Use tag range if previous tag exists
          git log ${{ steps.get-latest-tag.outputs.latest_tag }}..HEAD --pretty=format:"- %s (%h)" >> release-notes.md
        else
          # Use all commits if no previous tags exist
          git log --pretty=format:"- %s (%h)" >> release-notes.md
        fi
        
        echo "" >> release-notes.md
        echo "## Container Images" >> release-notes.md
        echo "- Backend: \`${{ env.REGISTRY }}/${{ env.REPO_LOWER }}/backend:run-${{ github.run_id }}\`" >> release-notes.md
        echo "- Frontend: \`${{ env.REGISTRY }}/${{ env.REPO_LOWER }}/frontend:run-${{ github.run_id }}\`" >> release-notes.md
        echo "" >> release-notes.md
        echo "**Workflow Run ID**: ${{ github.run_id }}" >> release-notes.md
        
    - name: Create release
      id: create-release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body_path: release-notes.md
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}

  deploy-dev:
    name: Deploy to Development
    needs: create-release
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      id-token: write
    uses: ./.github/workflows/deploy.yml
    with:
      environment: dev
      image_tag: run-${{ github.run_id }}
      release_tag: v${{ github.run_number }}
      run_id: run-${{ github.run_id }}
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID_DEV }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID_DEV }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID_DEV }}
      FRONTEND_CLIENT_ID: ${{ secrets.FRONTEND_CLIENT_ID_DEV }}
      BACKEND_CLIENT_ID: ${{ secrets.BACKEND_CLIENT_ID_DEV }}
      BACKEND_CLIENT_SECRET: ${{ secrets.BACKEND_CLIENT_SECRET_DEV }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY_DEV }}
  deploy-prod:
    name: Deploy to Production
    needs: [create-release, deploy-dev]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      id-token: write
    uses: ./.github/workflows/deploy.yml
    with:
      environment: prod
      image_tag: run-${{ github.run_id }}
      release_tag: v${{ github.run_number }}
      run_id: run-${{ github.run_id }}
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID_PROD }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID_PROD }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID_PROD }}
      FRONTEND_CLIENT_ID: ${{ secrets.FRONTEND_CLIENT_ID_PROD }}
      BACKEND_CLIENT_ID: ${{ secrets.BACKEND_CLIENT_ID_PROD }}
      BACKEND_CLIENT_SECRET: ${{ secrets.BACKEND_CLIENT_SECRET_PROD }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY_PROD }}

  notify-completion:
    name: Notify Build and Deployment Completion
    runs-on: ubuntu-latest
    needs: [create-release, deploy-dev, deploy-prod]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.create-release.result == 'success' && needs.deploy-dev.result == 'success' && needs.deploy-prod.result == 'success'
      run: |
        echo "✅ Build and deployment completed successfully"
        echo "🚀 Release created: v${{ github.run_number }}"
        echo "📦 Container images published to GHCR"
        echo "🌍 Development and production environments deployed"
        
    - name: Notify on partial success
      if: needs.create-release.result == 'success' && needs.deploy-dev.result == 'success' && needs.deploy-prod.result != 'success'
      run: |
        echo "⚠️ Build and development deployment completed successfully"
        echo "🚀 Release created: v${{ github.run_number }}"
        echo "📦 Container images published to GHCR"
        echo "🌍 Development environment deployed"
        echo "❌ Production deployment failed or was skipped"
        
    - name: Notify on failure
      if: needs.create-release.result == 'failure' || needs.deploy-dev.result == 'failure' || needs.deploy-prod.result == 'failure'
      run: |
        echo "❌ Build or deployment failed"
        echo "📋 Check the workflow logs for details"
        if [ "${{ needs.create-release.result }}" == "failure" ]; then
          echo "💥 Release creation failed"
        fi
        if [ "${{ needs.deploy-dev.result }}" == "failure" ]; then
          echo "💥 Development deployment failed"
        fi
        if [ "${{ needs.deploy-prod.result }}" == "failure" ]; then
          echo "💥 Production deployment failed"
        fi
        exit 1